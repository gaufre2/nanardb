// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid(2))

  username String @unique
  avatar   Bytes?

  writtenChronicles Chronicle[]
  ratings           ChronicleRating[]

  @@map("users")
}

model Genre {
  id Int @id @default(autoincrement())

  title String @unique
  link  String @unique

  subGenreIds SubGenre[]
  Chronicles  Chronicle[]

  @@map("genres")
}

model SubGenre {
  id Int @id @default(autoincrement())

  title   String @unique
  link    String @unique
  Genre   Genre  @relation(fields: [genreId], references: [id])
  genreId Int

  Chronicles Chronicle[]

  @@map("subGenres")
}

enum RarityRating {
  COMMON
  FINDABLE
  RARE
  EXOTIC
  COLLECTORS_ITEM
  UNFINDABLE
  NEVER_RELEASED
}

model ChronicleRating {
  chronicleId Int
  userId      String

  rating Decimal

  chronicle Chronicle @relation(fields: [chronicleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([chronicleId, userId])
}

model Chronicle {
  id        Int      @id @default(autoincrement())
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  link       String @unique
  createYear Int?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  ratings ChronicleRating[]
  averageRating Decimal
  rarityRating  RarityRating?

  genre      Genre    @relation(fields: [genreId], references: [id])
  genreId    Int
  subGenre   SubGenre @relation(fields: [subGenreId], references: [id])
  subGenreId Int

  mainTitle         String   @unique
  originalTitle     String?
  alternativeTitles String[]
  directors         String[]
  releaseYear       Int?
  originCountries   String[]
  runtime           Int?

  poster     Bytes?
  posterFile String?

  tmdbId Int?

  @@map("chronicles")
}
