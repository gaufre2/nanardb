// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid(2))

  username String @unique
  avatar   Bytes

  writtenReviews Review[]
  ratings        Rating[]

  @@map("users")
}

model Genre {
  id Int @id @default(autoincrement())

  title String @unique
  link  String @unique

  subgenreIds Subgenre[]
  reviews     Review[]

  @@map("genres")
}

model Subgenre {
  id Int @id @default(autoincrement())

  title   String @unique
  link    String @unique
  genre   Genre  @relation(fields: [genreId], references: [id])
  genreId Int

  reviews Review[]

  @@map("subgenres")
}

enum Rarity {
  COMMON
  FINDABLE
  RARE
  EXOTIC
  COLLECTORS_ITEM
  UNFINDABLE
  NEVER_RELEASED
}

model Rating {
  reviewId Int
  userId   String

  rating Decimal

  review Review @relation(fields: [reviewId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([reviewId, userId])
}

model CutVideo {
  id Int @id

  title         String
  averageRating Decimal
  links         Json

  reviews Review[]
}

model EscaleANanarlandVideo {
  id Int @id

  title           String
  pageLink        String
  publicationDate DateTime

  reviews Review[]
}

model NanaroscopeVideo {
  seasonEpisodeId String @id

  title String

  reviews Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  link       String @unique
  createYear Int?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  ratings       Rating[]
  averageRating Decimal
  rarity        Rarity?

  genre             Genre    @relation(fields: [genreId], references: [id])
  genreId           Int
  subgenre          Subgenre @relation(fields: [subgenreId], references: [id])
  subgenreId        Int
  mainTitle         String   @unique
  originalTitle     String?
  alternativeTitles String[]
  directors         String[]
  releaseYear       Int?
  originCountries   String[]
  runtime           Int?

  cutVideos              CutVideo[]
  escaleANanarlandVideos EscaleANanarlandVideo[]
  nanaroscopeVideos      NanaroscopeVideo[]

  poster     Bytes?
  posterFile String?

  tmdbId Int?

  @@map("reviews")
}
